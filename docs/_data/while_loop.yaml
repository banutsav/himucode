single_for_title: While Loop Programs
programs:

- title: |
    WAP to take a number (n) as input and then find the sum of all it's digits. 
    For example if the input **n = 2673**, then the output should be **18 i.e. 2 + 6 + 7 + 3** 
  
  code: |

    import java.util.*;
    public class Test
    {
      public static void main()
      {
        int s = 0, n, d;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a number");
        n = sc.nextInt();
        
        // extract digits
        while (n != 0)
        {
            d = n % 10;
            n = n / 10;
            s += d;
        }
        System.out.println("Sum of the digits = " + s);
      } 
    }

  python: |
    
    n = int(input('enter the number  : '))
    s = 0
    while n != 0:
      d = n % 10
      n = int(n / 10)
      s += d
    print('sum of digits =', s)

- title: |
    Use a while loop to keep entering numbers except 0 - **the loop will stop once the user enters a 0**. 
    Within the loop, keep summing up all the positive even numbers and the negative odd numbers. 
    Once the loop stops, print out both the sums

  code: |

    import java.util.*;
    public class Test
    {
      public static void main()
      {
        int pe = 0, no = 0, n = 1;
        Scanner sc = new Scanner(System.in);
        while (n != 0)
        {
            System.out.println("Enter number (0 to exit)");
            n = sc.nextInt();
            
            // positive even
            if ((n > 0) && (n % 2 == 0))
                pe += n;
            // negative odd
            else if ((n < 0) && (n % 2 != 0))
                no += n;
        }
        System.out.println("Sum of +ve even: " + pe);
        System.out.println("Sum of -ve odd: " + no);
      }
    } 

  python: |

    n = 1
    pe = 0
    no = 0

    while n != 0:

      n = int(input("Enter a number (0 to exit) : "))

      # positive even
      if n > 0 and n % 2 == 0:
        pe += n
      # negative odd
      elif n < 0 and n % 2 != 0:
        no += n

    print("sum of +ve even numbers : ", pe)
    print("sum of -ve odd numbers : ", no)


- title: |
    An **Armstrong number** of 3 digits is a 3-digit number
    , the sum of cubes of each digits is equal to the number itself. 
    For example: **153 = 1x1x1 + 5x5x5 + 3x3x3**
    <br>WAP to input a 3 digit number and check if it is an Armstrong Number

  code: |

    import java.util.*;
    public class Test
    {
      public static void main()
      {
        int s = 0, n, d, a;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a number");
        n = sc.nextInt();
        
        // preserve the original number
        a = n;
        
        // extract digits
        while (n != 0)
        {
            d = n % 10;
            n = n / 10;
            s += (d*d*d);
        }
        System.out.println("Sum of the cube of the digits = " + s);
        
        // check if armstrong
        if (a == s)
            System.out.println("Armstrong number");
        else
            System.out.println("Not an Armstrong number");
      }
    }

  python: |

    n = int(input("enter the number : "))

    # preserve the original number
    a = n

    s = 0
    # digit extraction
    while n != 0:
      d = n % 10
      n = int(n / 10)
      s += (d**3)

    print("sum of cube of digits =", s)

    if s == a:
      print("armstrong number")
    else:
      print("not an armstrong number")

- title: |

    WAP to take a 5 digit number from user and display the product of largest and 
    second largest digit of the number<br>
    For Example: If the input is 69231, the product will be (9 * 6) = 54

  code: |

    import java.util.*;
    public class Test
    {
      public static void main()
      {
        Scanner sc = new Scanner(System.in);
        int n, r, ld, sld, count = 0;
        boolean flag;
        
        System.out.println("Enter the number: ");
        n = sc.nextInt();

        // initialize
        ld = -1;
        sld = -1;
        
        // extract digits
        while (n != 0)
        {
            r = n % 10;
            n = n/10;
            
            // count the digits
            count++;
            
            if ( ld < r )
            {
              if ( sld < ld)
                sld = ld;
              ld = r;
            }
            else if ( ld > r && sld < r)
            {
              sld = r;
            }
        }
        
        // check if 5 digits
        if (count == 5)
        {
            System.out.println("Largest Digit: " + ld);
            System.out.println("Second Largest Digit: " + sld);
            System.out.println("Product = " + (ld * sld));
        }
        else
            System.out.println("Number must be of 5 digits");
      }
    }

  python: |

    # enter the number
    n = int(input('enter number: '))

    count = 0

    ld = -1
    sld = -1

    # extract digits
    while n != 0:
    
      r = n % 10
      n = int(n/10)

      # count the number of digits
      count += 1

      if ld < r:
        if sld < ld:
            sld = ld
        ld = r
      elif ld > r and sld < r:
        sld = r

    # print out if 5 digits
    if count == 5:
      print('Largest Digit: ', ld)
      print('Second Largest Digit: ', sld)
      print('Product: ', ld * sld)
    else:
      print('Number should be of 5 digits')


- title: |

    WAP to enter a 3 digit positive number from user and print the LCM of the digits of the number<br>
    For Example: If the input is 664, LCM of digits of the number 6, 6, 4 is 12

  code: |

    import java.util.*;
    public class Test
    {
      public static void main()
      {
        Scanner sc = new Scanner(System.in);
        int n, d1, d2, d3, max, lcm;
        System.out.println("Enter the number: ");
        n = sc.nextInt();
        
        // get the 3 digits
        d1 = n % 10;
        n /= 10;
        d2 = n % 10;
        d3 = n / 10;
        System.out.println(d1 + "," + d2 + "," + d3);
        
        // find the largest
        max = d1;
        if ((d1 >= d2) && (d1 >= d3)) 
            max = d1;
        else if ((d2 >= d1) && (d2 >= d3)) 
            max = d2;
        else if ((d3 >= d1) && (d3 >= d2)) 
            max = d3;
            
        // find lcm
        lcm = max;
        while (true)
        {
            if ((lcm % d1 == 0) && (lcm % d2 == 0) && (lcm % d3 == 0))
                break;
            
            lcm += max;
        }
        
        System.out.println("lcm is " + lcm);
      }
    }

  python: |

    # enter the number
    n = int(input('enter number: '))

    # get the 3 digits
    d1 = n % 10
    n = int(n / 10)
    d2 = n % 10
    d3 = int(n / 10)
    print(d1, d2, d3)
        
    # find the largest
    mx = d1
    if (d1 >= d2) and (d1 >= d3):
      mx = d1
    elif (d2 >= d1) and (d2 >= d3):
      mx = d2
    elif (d3 >= d1) and (d3 >= d2):
      mx = d3
            
    # find lcm
    lcm = mx
    while True:
      if (lcm % d1 == 0) and (lcm % d2 == 0) and (lcm % d3 == 0):
        break
            
      lcm += mx

    print('LCM is', lcm)
